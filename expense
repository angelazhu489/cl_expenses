#! /usr/bin/env ruby
require "pg"
require "Date"
require "io/console"

class ExpenseData
	def initialize
		@db = PG.connect(dbname:"expenses")
	end

	def list_expenses
		table = @db.exec("SELECT * FROM expenses ORDER BY created_on;")
		display_expenses(table)
	end
	
	def add_expense(amnt, memo)
		date = Date.today
		sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
		@db.exec_params(sql, [amnt, memo, date])
	end

	def search_expense(query)
		sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
		table = @db.exec_params(sql, ["%#{query}%"])
		display_expenses(table)
	end 

	def delete_expenses(id)
		sql = "SELECT * FROM expenses WHERE id = $1"
		row_to_delete = @db.exec_params(sql, [id])
		if row_to_delete.none?
			puts "There is no expense with the id #{id}."
		else
			sql = "DELETE FROM expenses WHERE id = $1"
			@db.exec_params(sql, [id])
			puts "The following expense has been deleted:"
			display_expenses(row_to_delete)
		end
	end

	def delete_all_expenses
		sql = "DELETE FROM expenses"
		@db.exec(sql)
		puts "All expenses have been deleted."
	end

	def display_expenses(table)
		table.each do |tuple|
			cols = ["#{tuple["id"].rjust(3)}", 
				"#{tuple["created_on"]}",
				"#{tuple["amount"].rjust(12)}",
				"#{tuple["memo"]}"]
			puts cols.join(" | ")
		end
	end
end

class CLI
	def initialize
		@app = ExpenseData.new
	end

	def run(args)
		command = args[0]
		if command == "list"
			@app.list_expenses
		elsif command == "add"
			if args[1] && args[2]
				amount = args[1]
				memo = args[2]
				@app.add_expense(amount, memo)
			else
				puts "You must provide an amount and memo."
			end
		elsif command == "search"
			if args[1]
				query = args[1]
				@app.search_expense(query)
			else
				puts "You must provide a search query."
			end
		elsif command == "delete"
			if args[1]
				id = args[1]
				@app.delete_expenses(id)
			else
				puts "You must provide an id number."
			end
		elsif command == "clear"
			puts "This will remove all expenses. Are you sure? (y/n)"
			input = STDIN.getch
			@app.delete_all_expenses if input == "y"
		else 
			display_help
		end
	end

	def display_help
		puts <<~HELP 
			An expense recording system
	
			Commands:
	
			add AMOUNT MEMO - record a new expense
			clear - delete all expenses
			list - list all expenses
			delete NUMBER - remove expense with id NUMBER
			search QUERY - list expenses with a matching memo field
		HELP
	end 
end

CLI.new.run(ARGV)